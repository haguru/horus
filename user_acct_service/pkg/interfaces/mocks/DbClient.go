// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DbClient is an autogenerated mock type for the DbClient type
type DbClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: databaseName, collectionName, doc
func (_m *DbClient) Create(databaseName string, collectionName string, doc interface{}) (string, error) {
	ret := _m.Called(databaseName, collectionName, doc)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) (string, error)); ok {
		return rf(databaseName, collectionName, doc)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}) string); ok {
		r0 = rf(databaseName, collectionName, doc)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = rf(databaseName, collectionName, doc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: databaseName, collectionName, filterParms
func (_m *DbClient) Delete(databaseName string, collectionName string, filterParms map[string]interface{}) error {
	ret := _m.Called(databaseName, collectionName, filterParms)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) error); ok {
		r0 = rf(databaseName, collectionName, filterParms)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields: _a0
func (_m *DbClient) Disconnect(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DocumentExist provides a mock function with given fields: databaseName, collectionName, filterParams
func (_m *DbClient) DocumentExist(databaseName string, collectionName string, filterParams map[string]interface{}) (bool, error) {
	ret := _m.Called(databaseName, collectionName, filterParams)

	if len(ret) == 0 {
		panic("no return value specified for DocumentExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) (bool, error)); ok {
		return rf(databaseName, collectionName, filterParams)
	}
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) bool); ok {
		r0 = rf(databaseName, collectionName, filterParams)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, map[string]interface{}) error); ok {
		r1 = rf(databaseName, collectionName, filterParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: databaseName, collectionName, filterParams
func (_m *DbClient) Get(databaseName string, collectionName string, filterParams map[string]interface{}) (interface{}, error) {
	ret := _m.Called(databaseName, collectionName, filterParams)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) (interface{}, error)); ok {
		return rf(databaseName, collectionName, filterParams)
	}
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) interface{}); ok {
		r0 = rf(databaseName, collectionName, filterParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, map[string]interface{}) error); ok {
		r1 = rf(databaseName, collectionName, filterParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: databaseName, collectionName, filterParams, updateType, items
func (_m *DbClient) Update(databaseName string, collectionName string, filterParams map[string]interface{}, updateType string, items map[string]interface{}) error {
	ret := _m.Called(databaseName, collectionName, filterParams, updateType, items)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}, string, map[string]interface{}) error); ok {
		r0 = rf(databaseName, collectionName, filterParams, updateType, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDbClient creates a new instance of DbClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDbClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DbClient {
	mock := &DbClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
