// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: follower.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FollowerDB_CreateFollowee_FullMethodName = "/followerdb.FollowerDB/CreateFollowee"
	FollowerDB_GetFollowers_FullMethodName   = "/followerdb.FollowerDB/GetFollowers"
	FollowerDB_DeleteFollower_FullMethodName = "/followerdb.FollowerDB/DeleteFollower"
)

// FollowerDBClient is the client API for FollowerDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowerDBClient interface {
	CreateFollowee(ctx context.Context, in *Followee, opts ...grpc.CallOption) (*Id, error)
	GetFollowers(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Id], error)
	// rpc UpdateFollower(PasswordRequest) returns (Status);   // Update
	DeleteFollower(ctx context.Context, in *Followee, opts ...grpc.CallOption) (*Status, error)
}

type followerDBClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowerDBClient(cc grpc.ClientConnInterface) FollowerDBClient {
	return &followerDBClient{cc}
}

func (c *followerDBClient) CreateFollowee(ctx context.Context, in *Followee, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, FollowerDB_CreateFollowee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerDBClient) GetFollowers(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Id], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FollowerDB_ServiceDesc.Streams[0], FollowerDB_GetFollowers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Id, Id]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FollowerDB_GetFollowersClient = grpc.ServerStreamingClient[Id]

func (c *followerDBClient) DeleteFollower(ctx context.Context, in *Followee, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, FollowerDB_DeleteFollower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowerDBServer is the server API for FollowerDB service.
// All implementations must embed UnimplementedFollowerDBServer
// for forward compatibility.
type FollowerDBServer interface {
	CreateFollowee(context.Context, *Followee) (*Id, error)
	GetFollowers(*Id, grpc.ServerStreamingServer[Id]) error
	// rpc UpdateFollower(PasswordRequest) returns (Status);   // Update
	DeleteFollower(context.Context, *Followee) (*Status, error)
	mustEmbedUnimplementedFollowerDBServer()
}

// UnimplementedFollowerDBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFollowerDBServer struct{}

func (UnimplementedFollowerDBServer) CreateFollowee(context.Context, *Followee) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollowee not implemented")
}
func (UnimplementedFollowerDBServer) GetFollowers(*Id, grpc.ServerStreamingServer[Id]) error {
	return status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedFollowerDBServer) DeleteFollower(context.Context, *Followee) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollower not implemented")
}
func (UnimplementedFollowerDBServer) mustEmbedUnimplementedFollowerDBServer() {}
func (UnimplementedFollowerDBServer) testEmbeddedByValue()                    {}

// UnsafeFollowerDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowerDBServer will
// result in compilation errors.
type UnsafeFollowerDBServer interface {
	mustEmbedUnimplementedFollowerDBServer()
}

func RegisterFollowerDBServer(s grpc.ServiceRegistrar, srv FollowerDBServer) {
	// If the following call pancis, it indicates UnimplementedFollowerDBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FollowerDB_ServiceDesc, srv)
}

func _FollowerDB_CreateFollowee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Followee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerDBServer).CreateFollowee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerDB_CreateFollowee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerDBServer).CreateFollowee(ctx, req.(*Followee))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerDB_GetFollowers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FollowerDBServer).GetFollowers(m, &grpc.GenericServerStream[Id, Id]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FollowerDB_GetFollowersServer = grpc.ServerStreamingServer[Id]

func _FollowerDB_DeleteFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Followee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerDBServer).DeleteFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerDB_DeleteFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerDBServer).DeleteFollower(ctx, req.(*Followee))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowerDB_ServiceDesc is the grpc.ServiceDesc for FollowerDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowerDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "followerdb.FollowerDB",
	HandlerType: (*FollowerDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFollowee",
			Handler:    _FollowerDB_CreateFollowee_Handler,
		},
		{
			MethodName: "DeleteFollower",
			Handler:    _FollowerDB_DeleteFollower_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFollowers",
			Handler:       _FollowerDB_GetFollowers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "follower.proto",
}
