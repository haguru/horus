// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDbClient creates a new instance of MockDbClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDbClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDbClient {
	mock := &MockDbClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDbClient is an autogenerated mock type for the DbClient type
type MockDbClient struct {
	mock.Mock
}

type MockDbClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDbClient) EXPECT() *MockDbClient_Expecter {
	return &MockDbClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockDbClient
func (_mock *MockDbClient) Create(databaseName string, collectionName string, doc interface{}) (string, error) {
	ret := _mock.Called(databaseName, collectionName, doc)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, interface{}) (string, error)); ok {
		return returnFunc(databaseName, collectionName, doc)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, interface{}) string); ok {
		r0 = returnFunc(databaseName, collectionName, doc)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = returnFunc(databaseName, collectionName, doc)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDbClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDbClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - databaseName string
//   - collectionName string
//   - doc interface{}
func (_e *MockDbClient_Expecter) Create(databaseName interface{}, collectionName interface{}, doc interface{}) *MockDbClient_Create_Call {
	return &MockDbClient_Create_Call{Call: _e.mock.On("Create", databaseName, collectionName, doc)}
}

func (_c *MockDbClient_Create_Call) Run(run func(databaseName string, collectionName string, doc interface{})) *MockDbClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interface{}
		if args[2] != nil {
			arg2 = args[2].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDbClient_Create_Call) Return(s string, err error) *MockDbClient_Create_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDbClient_Create_Call) RunAndReturn(run func(databaseName string, collectionName string, doc interface{}) (string, error)) *MockDbClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockDbClient
func (_mock *MockDbClient) Delete(databaseName string, collectionName string, filterParms map[string]interface{}) error {
	ret := _mock.Called(databaseName, collectionName, filterParms)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, map[string]interface{}) error); ok {
		r0 = returnFunc(databaseName, collectionName, filterParms)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDbClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDbClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - databaseName string
//   - collectionName string
//   - filterParms map[string]interface{}
func (_e *MockDbClient_Expecter) Delete(databaseName interface{}, collectionName interface{}, filterParms interface{}) *MockDbClient_Delete_Call {
	return &MockDbClient_Delete_Call{Call: _e.mock.On("Delete", databaseName, collectionName, filterParms)}
}

func (_c *MockDbClient_Delete_Call) Run(run func(databaseName string, collectionName string, filterParms map[string]interface{})) *MockDbClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]interface{}
		if args[2] != nil {
			arg2 = args[2].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDbClient_Delete_Call) Return(err error) *MockDbClient_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDbClient_Delete_Call) RunAndReturn(run func(databaseName string, collectionName string, filterParms map[string]interface{}) error) *MockDbClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function for the type MockDbClient
func (_mock *MockDbClient) Disconnect(context1 context.Context) error {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDbClient_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockDbClient_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockDbClient_Expecter) Disconnect(context1 interface{}) *MockDbClient_Disconnect_Call {
	return &MockDbClient_Disconnect_Call{Call: _e.mock.On("Disconnect", context1)}
}

func (_c *MockDbClient_Disconnect_Call) Run(run func(context1 context.Context)) *MockDbClient_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDbClient_Disconnect_Call) Return(err error) *MockDbClient_Disconnect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDbClient_Disconnect_Call) RunAndReturn(run func(context1 context.Context) error) *MockDbClient_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// DocumentExist provides a mock function for the type MockDbClient
func (_mock *MockDbClient) DocumentExist(databaseName string, collectionName string, filterParams map[string]interface{}) (bool, error) {
	ret := _mock.Called(databaseName, collectionName, filterParams)

	if len(ret) == 0 {
		panic("no return value specified for DocumentExist")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, map[string]interface{}) (bool, error)); ok {
		return returnFunc(databaseName, collectionName, filterParams)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, map[string]interface{}) bool); ok {
		r0 = returnFunc(databaseName, collectionName, filterParams)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, map[string]interface{}) error); ok {
		r1 = returnFunc(databaseName, collectionName, filterParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDbClient_DocumentExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DocumentExist'
type MockDbClient_DocumentExist_Call struct {
	*mock.Call
}

// DocumentExist is a helper method to define mock.On call
//   - databaseName string
//   - collectionName string
//   - filterParams map[string]interface{}
func (_e *MockDbClient_Expecter) DocumentExist(databaseName interface{}, collectionName interface{}, filterParams interface{}) *MockDbClient_DocumentExist_Call {
	return &MockDbClient_DocumentExist_Call{Call: _e.mock.On("DocumentExist", databaseName, collectionName, filterParams)}
}

func (_c *MockDbClient_DocumentExist_Call) Run(run func(databaseName string, collectionName string, filterParams map[string]interface{})) *MockDbClient_DocumentExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]interface{}
		if args[2] != nil {
			arg2 = args[2].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDbClient_DocumentExist_Call) Return(b bool, err error) *MockDbClient_DocumentExist_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockDbClient_DocumentExist_Call) RunAndReturn(run func(databaseName string, collectionName string, filterParams map[string]interface{}) (bool, error)) *MockDbClient_DocumentExist_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockDbClient
func (_mock *MockDbClient) Get(databaseName string, collectionName string, filterParams map[string]interface{}) (interface{}, error) {
	ret := _mock.Called(databaseName, collectionName, filterParams)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, map[string]interface{}) (interface{}, error)); ok {
		return returnFunc(databaseName, collectionName, filterParams)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, map[string]interface{}) interface{}); ok {
		r0 = returnFunc(databaseName, collectionName, filterParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, map[string]interface{}) error); ok {
		r1 = returnFunc(databaseName, collectionName, filterParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDbClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDbClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - databaseName string
//   - collectionName string
//   - filterParams map[string]interface{}
func (_e *MockDbClient_Expecter) Get(databaseName interface{}, collectionName interface{}, filterParams interface{}) *MockDbClient_Get_Call {
	return &MockDbClient_Get_Call{Call: _e.mock.On("Get", databaseName, collectionName, filterParams)}
}

func (_c *MockDbClient_Get_Call) Run(run func(databaseName string, collectionName string, filterParams map[string]interface{})) *MockDbClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]interface{}
		if args[2] != nil {
			arg2 = args[2].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDbClient_Get_Call) Return(ifaceVal interface{}, err error) *MockDbClient_Get_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockDbClient_Get_Call) RunAndReturn(run func(databaseName string, collectionName string, filterParams map[string]interface{}) (interface{}, error)) *MockDbClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockDbClient
func (_mock *MockDbClient) GetAll(databaseName string, collectionName string, filterParams map[string]interface{}, skip int32, limit int32) (interface{}, error) {
	ret := _mock.Called(databaseName, collectionName, filterParams, skip, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, map[string]interface{}, int32, int32) (interface{}, error)); ok {
		return returnFunc(databaseName, collectionName, filterParams, skip, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, map[string]interface{}, int32, int32) interface{}); ok {
		r0 = returnFunc(databaseName, collectionName, filterParams, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, map[string]interface{}, int32, int32) error); ok {
		r1 = returnFunc(databaseName, collectionName, filterParams, skip, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDbClient_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockDbClient_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - databaseName string
//   - collectionName string
//   - filterParams map[string]interface{}
//   - skip int32
//   - limit int32
func (_e *MockDbClient_Expecter) GetAll(databaseName interface{}, collectionName interface{}, filterParams interface{}, skip interface{}, limit interface{}) *MockDbClient_GetAll_Call {
	return &MockDbClient_GetAll_Call{Call: _e.mock.On("GetAll", databaseName, collectionName, filterParams, skip, limit)}
}

func (_c *MockDbClient_GetAll_Call) Run(run func(databaseName string, collectionName string, filterParams map[string]interface{}, skip int32, limit int32)) *MockDbClient_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]interface{}
		if args[2] != nil {
			arg2 = args[2].(map[string]interface{})
		}
		var arg3 int32
		if args[3] != nil {
			arg3 = args[3].(int32)
		}
		var arg4 int32
		if args[4] != nil {
			arg4 = args[4].(int32)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockDbClient_GetAll_Call) Return(ifaceVal interface{}, err error) *MockDbClient_GetAll_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockDbClient_GetAll_Call) RunAndReturn(run func(databaseName string, collectionName string, filterParams map[string]interface{}, skip int32, limit int32) (interface{}, error)) *MockDbClient_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockDbClient
func (_mock *MockDbClient) Ping() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDbClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockDbClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockDbClient_Expecter) Ping() *MockDbClient_Ping_Call {
	return &MockDbClient_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockDbClient_Ping_Call) Run(run func()) *MockDbClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDbClient_Ping_Call) Return(err error) *MockDbClient_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDbClient_Ping_Call) RunAndReturn(run func() error) *MockDbClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockDbClient
func (_mock *MockDbClient) Update(databaseName string, collectionName string, filterParams map[string]interface{}, updateType string, items map[string]interface{}) error {
	ret := _mock.Called(databaseName, collectionName, filterParams, updateType, items)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, map[string]interface{}, string, map[string]interface{}) error); ok {
		r0 = returnFunc(databaseName, collectionName, filterParams, updateType, items)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDbClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDbClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - databaseName string
//   - collectionName string
//   - filterParams map[string]interface{}
//   - updateType string
//   - items map[string]interface{}
func (_e *MockDbClient_Expecter) Update(databaseName interface{}, collectionName interface{}, filterParams interface{}, updateType interface{}, items interface{}) *MockDbClient_Update_Call {
	return &MockDbClient_Update_Call{Call: _e.mock.On("Update", databaseName, collectionName, filterParams, updateType, items)}
}

func (_c *MockDbClient_Update_Call) Run(run func(databaseName string, collectionName string, filterParams map[string]interface{}, updateType string, items map[string]interface{})) *MockDbClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]interface{}
		if args[2] != nil {
			arg2 = args[2].(map[string]interface{})
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 map[string]interface{}
		if args[4] != nil {
			arg4 = args[4].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockDbClient_Update_Call) Return(err error) *MockDbClient_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDbClient_Update_Call) RunAndReturn(run func(databaseName string, collectionName string, filterParams map[string]interface{}, updateType string, items map[string]interface{}) error) *MockDbClient_Update_Call {
	_c.Call.Return(run)
	return _c
}
