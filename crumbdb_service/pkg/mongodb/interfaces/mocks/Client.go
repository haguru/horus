// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *Client) Connect() (*mongo.Client, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 *mongo.Client
	var r1 error
	if rf, ok := ret.Get(0).(func() (*mongo.Client, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *mongo.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSpatialIndex provides a mock function with given fields: databaseName, collectionName, spatialType
func (_m *Client) CreateSpatialIndex(databaseName string, collectionName string, spatialType string) error {
	ret := _m.Called(databaseName, collectionName, spatialType)

	if len(ret) == 0 {
		panic("no return value specified for CreateSpatialIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(databaseName, collectionName, spatialType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: databaseName, collectionName, id
func (_m *Client) Delete(databaseName string, collectionName string, id string) error {
	ret := _m.Called(databaseName, collectionName, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(databaseName, collectionName, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields: _a0
func (_m *Client) Disconnect(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: databaseName, collectionName
func (_m *Client) FindAll(databaseName string, collectionName string) ([]primitive.D, error) {
	ret := _m.Called(databaseName, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []primitive.D
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]primitive.D, error)); ok {
		return rf(databaseName, collectionName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []primitive.D); ok {
		r0 = rf(databaseName, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]primitive.D)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(databaseName, collectionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: databaseName, collectionName, id
func (_m *Client) FindOne(databaseName string, collectionName string, id string) (*primitive.D, error) {
	ret := _m.Called(databaseName, collectionName, id)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *primitive.D
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*primitive.D, error)); ok {
		return rf(databaseName, collectionName, id)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *primitive.D); ok {
		r0 = rf(databaseName, collectionName, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.D)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(databaseName, collectionName, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertRecord provides a mock function with given fields: databaseName, collectionName, doc
func (_m *Client) InsertRecord(databaseName string, collectionName string, doc interface{}) (string, error) {
	ret := _m.Called(databaseName, collectionName, doc)

	if len(ret) == 0 {
		panic("no return value specified for InsertRecord")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) (string, error)); ok {
		return rf(databaseName, collectionName, doc)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}) string); ok {
		r0 = rf(databaseName, collectionName, doc)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = rf(databaseName, collectionName, doc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: client
func (_m *Client) Ping(client *mongo.Client) error {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mongo.Client) error); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SpaitalQuery provides a mock function with given fields: pointType, coordinates, databaseName, collectionName
func (_m *Client) SpaitalQuery(pointType string, coordinates []float64, databaseName string, collectionName string) ([]primitive.D, error) {
	ret := _m.Called(pointType, coordinates, databaseName, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for SpaitalQuery")
	}

	var r0 []primitive.D
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []float64, string, string) ([]primitive.D, error)); ok {
		return rf(pointType, coordinates, databaseName, collectionName)
	}
	if rf, ok := ret.Get(0).(func(string, []float64, string, string) []primitive.D); ok {
		r0 = rf(pointType, coordinates, databaseName, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]primitive.D)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []float64, string, string) error); ok {
		r1 = rf(pointType, coordinates, databaseName, collectionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: databaseName, collectionName, id, items
func (_m *Client) Update(databaseName string, collectionName string, id string, items map[string]interface{}) error {
	ret := _m.Called(databaseName, collectionName, id, items)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, map[string]interface{}) error); ok {
		r0 = rf(databaseName, collectionName, id, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
