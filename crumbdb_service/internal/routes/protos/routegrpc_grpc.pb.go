// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: routegrpc.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CrumbDB_Create_FullMethodName    = "/crumbdb.CrumbDB/Create"
	CrumbDB_GetCrumbs_FullMethodName = "/crumbdb.CrumbDB/GetCrumbs"
	CrumbDB_Update_FullMethodName    = "/crumbdb.CrumbDB/Update"
	CrumbDB_Delete_FullMethodName    = "/crumbdb.CrumbDB/Delete"
)

// CrumbDBClient is the client API for CrumbDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrumbDBClient interface {
	Create(ctx context.Context, in *Crumb, opts ...grpc.CallOption) (*Id, error)
	GetCrumbs(ctx context.Context, in *Point, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Crumb], error)
	Update(ctx context.Context, in *Crumb, opts ...grpc.CallOption) (*Id, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
}

type crumbDBClient struct {
	cc grpc.ClientConnInterface
}

func NewCrumbDBClient(cc grpc.ClientConnInterface) CrumbDBClient {
	return &crumbDBClient{cc}
}

func (c *crumbDBClient) Create(ctx context.Context, in *Crumb, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, CrumbDB_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crumbDBClient) GetCrumbs(ctx context.Context, in *Point, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Crumb], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CrumbDB_ServiceDesc.Streams[0], CrumbDB_GetCrumbs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Point, Crumb]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CrumbDB_GetCrumbsClient = grpc.ServerStreamingClient[Crumb]

func (c *crumbDBClient) Update(ctx context.Context, in *Crumb, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, CrumbDB_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crumbDBClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, CrumbDB_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrumbDBServer is the server API for CrumbDB service.
// All implementations must embed UnimplementedCrumbDBServer
// for forward compatibility.
type CrumbDBServer interface {
	Create(context.Context, *Crumb) (*Id, error)
	GetCrumbs(*Point, grpc.ServerStreamingServer[Crumb]) error
	Update(context.Context, *Crumb) (*Id, error)
	Delete(context.Context, *Id) (*Id, error)
	mustEmbedUnimplementedCrumbDBServer()
}

// UnimplementedCrumbDBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCrumbDBServer struct{}

func (UnimplementedCrumbDBServer) Create(context.Context, *Crumb) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCrumbDBServer) GetCrumbs(*Point, grpc.ServerStreamingServer[Crumb]) error {
	return status.Errorf(codes.Unimplemented, "method GetCrumbs not implemented")
}
func (UnimplementedCrumbDBServer) Update(context.Context, *Crumb) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCrumbDBServer) Delete(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCrumbDBServer) mustEmbedUnimplementedCrumbDBServer() {}
func (UnimplementedCrumbDBServer) testEmbeddedByValue()                 {}

// UnsafeCrumbDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrumbDBServer will
// result in compilation errors.
type UnsafeCrumbDBServer interface {
	mustEmbedUnimplementedCrumbDBServer()
}

func RegisterCrumbDBServer(s grpc.ServiceRegistrar, srv CrumbDBServer) {
	// If the following call pancis, it indicates UnimplementedCrumbDBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CrumbDB_ServiceDesc, srv)
}

func _CrumbDB_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crumb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrumbDBServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrumbDB_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrumbDBServer).Create(ctx, req.(*Crumb))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrumbDB_GetCrumbs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Point)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrumbDBServer).GetCrumbs(m, &grpc.GenericServerStream[Point, Crumb]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CrumbDB_GetCrumbsServer = grpc.ServerStreamingServer[Crumb]

func _CrumbDB_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crumb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrumbDBServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrumbDB_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrumbDBServer).Update(ctx, req.(*Crumb))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrumbDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrumbDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrumbDB_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrumbDBServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// CrumbDB_ServiceDesc is the grpc.ServiceDesc for CrumbDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrumbDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crumbdb.CrumbDB",
	HandlerType: (*CrumbDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CrumbDB_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CrumbDB_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CrumbDB_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCrumbs",
			Handler:       _CrumbDB_GetCrumbs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "routegrpc.proto",
}
